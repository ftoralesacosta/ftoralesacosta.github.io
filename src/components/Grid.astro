---
interface Props {
	variant?: 'offset' | 'small';
}

const { variant } = Astro.props;
---

<ul class:list={['grid', { offset: variant === 'offset', small: variant === 'small' }]}>
	<slot />
</ul>

<style>
	.grid {
		display: grid;
		grid-auto-rows: 1fr;
		gap: 1rem;
		list-style: none;
		padding: 0;
	}

	.grid.small {
		grid-template-columns: 1fr 1fr;
		gap: 1.5rem;
	}

	/* If last row contains only one item, make first item span both columns. */
	.grid.small > :global(:first-child:nth-child(odd)) {
		grid-column: 1 / 3;
	}

	@media (min-width: 50em) {
		.grid {
			grid-template-columns: 1fr 1fr;
			gap: 4rem;
		}

		.grid.offset {
			--row-offset: 7.5rem;
			padding-bottom: var(--row-offset);
		}

        /* Shift the second item in each row (the right column) down to create the stagger. */
        .grid.offset > :global(:nth-child(even)) {
            transform: translateY(var(--row-offset));
        }		/* /1* Shift first item in each row vertically to create staggered effect. *1/ */
        /* .grid.offset > :global(:nth-child(odd)) { */
        /* 	transform: translateY(var(--row-offset)); */
        /* } */

        /* /1* If last row contains only one item, display it in the second column. *1/ */
        /* .grid.offset > :global(:last-child:nth-child(odd)) { */
        /* 	grid-column: 2 / 3; */
        /* 	transform: none; */
        /* } */

        .grid.small {
            display: flex;
            flex-wrap: wrap;
            justify-content: center;
            gap: 3rem;
        }

        .grid.small li {
            fontsize: 2.0rem;
        }

        .grid.small > :global(*) {
            flex-basis: 22rem;
        }
    }
</style>
